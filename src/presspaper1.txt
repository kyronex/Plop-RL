https://github.com/search

Les 64 premiers bits sont des données qui peuvent être jetées
Header : l'emplacement , des images clés, les temps forts du match à afficher sur la timeline et les Cyclic redundancy check (CRC)
         données de version et de propriétés

#Header
header_length         => UInt_32
header_crc            => UInt_32
&version               => Version
!!!! TAGame.Replay_Soccar_TA
&properties            => Properties
eof_length            => UInt_32
eof_crc               => UInt_32
levels                => List[UInt_32, String8]
keyframes             => List[UInt_32, KeyFrame]
network_stream_length => UInt_32

# Version
$ engine_version   => UInt_32
$ licensee_version => UInt_32
$ net_version      => UInt_32 if (.engine_version, .licensee_version) >=
                      (866, 18) else 0
# Properties
$ ~ => List[(x)::<break if x is None>, Property]

$ name        => String8; return None if .name in {
                     "None",
                     "\0\0\0None"
                 }
$ type        => String8
$ unknown_001 => UInt_64
$ value       =>      Int_32        if .type == "IntProperty"
                 else String16      if .type == "StrProperty"
                 else String16      if .type == "NameProperty"
                 else Float_32      if .type == "FloatProperty"
                 else ArrayProperty if .type == "ArrayProperty"
                 else ByteProperty  if .type == "ByteProperty"
                 else UInt_64       if .type == "QWordProperty"
                 else Bool_8        if .type == "BoolProperty"

# ArrayProperty

# String8
length => UInt_32
raw    => Bytes[.length]
$ ~    => Decode[.raw[:-1], "UTF-8"]


Footer : données nécessaires à la désérialisation du corps, ainsi que des informations de débogage
Body :  Contrairement au Header et au Footer, le body est sérialiséen domaine binaire, stockles données de rediffusion elle-même (position des véhicules, les chargements, etc.)


ces 2 fichier
"// server.js
import express from "express";
import cors from "cors";
import upload from "./cfg/multerCfg.js"; // Importer la configuration de multer
import Header from "./cfg/replayParser.js"; // Importer la configuration du Parser

import fs from "fs";

const app = express();
const PORT = process.env.PORT || 5000;

console.log(`Server is running on port ${PORT}`);

// Utiliser le middleware CORS
app.use(cors());

// Route test
app.get("/", (req, res) => {
	res.send("Hellos, World!");
});

// Route pour gérer les uploads de fichiers
app.post("/upload", upload.single("file"), (req, res) => {
	let reponse = null;

	if (!req.file) {
		return res.status(400).send("Fichier non uploaded.");
	}

	console.log(req.file.path);

	// Lire le fichier binaire
	fs.readFile(req.file.path, (err, data) => {
		if (err) {
			console.error("Error reading binary file:", err);
			reponse = { message: "Error reading binary file" };
			return;
		}

		let parsing = Header.parse(data);
		console.log("parsing");
		console.log(parsing);
		reponse = { message: "Fichier uploaded correctement.", data: parsing };

		res.json(reponse);

		fs.unlink(req.file.path, (err) => {
			if (err) {
				console.error("Erreur lors de la suppression du fichier :", err);
				return;
			}
			console.log("Fichier supprimé avec succès.");
		});
	});
});

// Démarrer le serveur
app.listen(PORT, () => {
	console.log(`Server is running on port ${PORT}`);
});
"
 et 
"import { Parser } from "binary-parser";

const testTest = function () {
	console.log(this);
	return 1;
};

const isNone = function () {
	//console.log(this.nom);
	if (this.nom === "None") {
		return 1;
	} else {
		return 0;
	}
};

const TestType = function () {
	// console.log(this.taille_type);
	// console.log(this.type);
	// console.log(this.details);
	switch (this.type) {
		case "IntProperty":
			return 1;
		case "StrProperty":
			return 2;
		case "NameProperty":
			return 2;
		case "FloatProperty":
			return 3;
		case "ArrayProperty":
			return 4;
		case "ByteProperty":
			return 5;
		case "BoolProperty":
			return 6;
		case "QWordProperty":
			return 7;
		default:
			return 0;
	}
};

const testReadUntil = function () {
	if (
		typeof this.Properties.key === "undefined" ||
		this.Properties.key === null
	) {
		this.Properties.key = 0;
	} else {
		this.Properties.key = this.Properties.key + 1;
	}

	if (this.Properties[this.Properties.key].nom === "None") {
		return true;
	} else {
		return false;
	}
};

const testVersion = function () {
	//console.log(this);
	if (this.engine_V >= 866 && this.license_V >= 18) {
		return 1;
	} else {
		return 0;
	}
};

const QWord = new Parser().endianess("little").int32("hex2").int32("hex1");

const Bool = new Parser().endianess("little").bit8("value");

const UInt32 = new Parser().endianess("little").int32();

const String16 = new Parser()
	.endianess("little")
	.int32("taille_String16")
	.string("value", {
		encoding: "utf8",
		length: "taille_String16",
		stripNull: true,
	});

const Float = new Parser().endianess("little").floatle();

const Byte = new Parser()
	.endianess("little")
	.int32("taille_cle")
	.string("cle", {
		encoding: "utf8",
		length: "taille_cle",
		stripNull: true,
	})
	.int32("taille_value")
	.string("value", {
		encoding: "utf8",
		length: "taille_value",
		stripNull: true,
	});

const Version = new Parser()
	.endianess("little")
	.int32("engine_V")
	.int32("license_V")
	.choice("netcode_V", {
		tag: testVersion,
		choices: {
			1: UInt32, // Si la condition est vraie, lire un entier non signé de 32 bits pour net_version
			0: new Parser(), // Sinon, définir net_version à 0
		},
	});

const ArrayDetail = new Parser()
	.endianess("little")
	.int32("taille_nom")
	.string("nom", {
		encoding: "utf8",
		length: "taille_nom",
		stripNull: true,
	})
	.choice("Info", {
		tag: isNone,
		choices: {
			1: new Parser(),
			0: new Parser()
				.endianess("little")
				.int32("taille_type")
				.string("type", {
					encoding: "utf8",
					length: "taille_type",
					stripNull: true,
				})
				.int32("inconnu1")
				.int32("inconnu2")
				.choice("details", {
					tag: TestType,
					choices: {
						1: UInt32,
						2: String16,
						3: Float,
						5: Byte,
						6: Bool,
						7: QWord,
						0: new Parser(),
					},
				}),
		},
	});

const ArrayProperty = new Parser()
	.endianess("little")
	.int32("taille_Array")
	.array("array", {
		type: new Parser().array("Properties", {
			type: ArrayDetail,
			readUntil: testReadUntil,
		}),
		length: "taille_Array",
	});

const Property = new Parser()
	.endianess("little")
	.int32("taille_nom")
	.string("nom", {
		encoding: "utf8",
		length: "taille_nom",
		stripNull: true,
	})
	.choice("Info", {
		tag: isNone,
		choices: {
			1: new Parser(),
			0: new Parser()
				.endianess("little")
				.int32("taille_type")
				.string("type", {
					encoding: "utf8",
					length: "taille_type",
					stripNull: true,
				})
				.int32("inconnu1")
				.int32("inconnu2")
				.choice("value", {
					tag: TestType,
					choices: {
						1: UInt32,
						2: String16,
						3: Float,
						4: ArrayProperty,
						5: Byte,
						6: Bool,
						7: QWord,
						0: new Parser(),
					},
				}),
		},
	});

const Header = new Parser()
	.endianess("little")
	.int32("header_taille")
	.int32("crc")
	.nest("Version", { type: Version })
	.int32("taille_RC")
	.string("ReplayClass", {
		encoding: "utf8",
		length: "taille_RC",
		stripNull: true,
	})
	.array("Properties", {
		type: Property,
		readUntil: testReadUntil,
	})
	.choice("TEST", {
		tag: testTest,
		choices: {
			1: UInt32, // Si la condition est vraie, lire un entier non signé de 32 bits pour net_version
			0: new Parser(), // Sinon, définir net_version à 0
		},
	});
//.nest("Properties", { type: Properties })
export default Header;
"
me fournise cette erreur 
"Server is running on port 5000
uploads\1735229074839-58B3B1A6452261F72CFA4CB580E7358D.replay
undefined:94
$tmp9.Info.inconnu1 = dataView.getInt32(offset, true);
                               ^

RangeError: Offset is outside the bounds of the DataView
    at DataView.prototype.getInt32 (<anonymous>)
    at Parser.eval [as compiled] (eval at compile (file:///C:/Users/jack_/Documents/Dev/Plop/Plop-RL/node_modules/binary-parser/dist/esm/binary_parser.mjs:557:25), <anonymous>:94:32)
    at Parser.parse (file:///C:/Users/jack_/Documents/Dev/Plop/Plop-RL/node_modules/binary-parser/dist/esm/binary_parser.mjs:607:21)
    at file:///C:/Users/jack_/Documents/Dev/Plop/Plop-RL/src/server.js:40:24
    at FSReqCallback.readFileAfterClose [as oncomplete] (node:internal/fs/read/context:68:3)

Node.js v23.1.0
[nodemon] app crashed - waiting for file changes before starting..."
